import{_ as t,n as e,e as o}from"./shell-2264602c.js";import{F as s,l as i,s as r}from"./faceplate-hovercard-d2963f31.js";import{x as l,l as n}from"./icon-82dd10b4.js";let a=class extends s{constructor(){super(...arguments),this.tooltipStyle="",this.scrollContainerSelector="",this.customGlobalCloseEvent="",this.triggerEvent="click",this.addListenersWhileOpened2=()=>{document.addEventListener("click",this.handleDocumentClick2),document.addEventListener("keydown",this.handleEscape),this.customGlobalCloseEvent&&document.addEventListener(this.customGlobalCloseEvent,(()=>this.close())),this.scrollRoot?.addEventListener("scroll",this._popperController.reposition),this.setupScrollOutOfViewHandler()},this.cleanupListenersWhileOpened2=()=>{document.removeEventListener("click",this.handleDocumentClick2),document.removeEventListener("keydown",this.handleEscape),this.customGlobalCloseEvent&&document.removeEventListener(this.customGlobalCloseEvent,(()=>this.close())),this.scrollRoot?.removeEventListener("scroll",this._popperController.reposition),this.observer?.disconnect()},this.handleDocumentClick2=t=>{if(!(t.target instanceof HTMLElement)||this.hidden)return;if(this.isEventIgnorable(t))return;this._eventUsedMap.has(t)||this.close()},this.isEventIgnorable=t=>this.contains(t.target)||t.composedPath().includes(this),this.handleFaceplateTrack2=()=>{this.closeOnTrack&&this.close()},this.render=()=>{const t=this._popperController.actualPosition||this.position;return l` <slot aria-describedby="faceplate-tooltip" faceplate-popper-trigger @click="${this.handleClick}"></slot> <div id="faceplate-tooltip" role="dialog" position="${t}" faceplate-popper-content aria-label="${n(this.label?this.label:void 0)}" style="${this.tooltipStyle}"> <slot name="content" @faceplate-track="${this.handleFaceplateTrack2}"></slot> </div> `}}get scrollRoot(){return this.scrollContainerSelector?document.querySelector(this.scrollContainerSelector):null}async show(){this.emitter.dispatch("open"),this.updateCustomProperties2(),this._popperController.open().then((()=>{this.hidden||(this.addListenersWhileOpened2(),this.emitter.dispatch("opened"))})),i(this).then(r(this._popperController.reposition)).then(r((t=>{t&&(this.focusManager?.refresh(),this.focusManager?.focus())}))),await this._popperController.currentState.animationFinished,this.focusManager?.focus(),this.cleanupTimeouts()}close(){return this.cleanupListenersWhileOpened2(),super.close()}reposition(){this._popperController.reposition()}updateCustomProperties2(){if("faceplate-tooltip"!==this.tagName.toLocaleLowerCase())return;const{clientHeight:t=null,clientWidth:e=null}=this.referenceElement,{clientHeight:o=null,clientWidth:s=null}=this._tooltip;t&&e&&o&&s&&(this.style.setProperty("--target-width",`${Math.round(e)}px`),this.style.setProperty("--target-height",`${Math.round(t)}px`),this.style.setProperty("--tooltip-width",`${Math.round(s)}px`),this.style.setProperty("--tooltip-height",`${Math.round(o)}px`))}setupScrollOutOfViewHandler(){const t=this.shadowRoot?.querySelector("[faceplate-popper-trigger]")?.assignedElements()?.[0];t&&this.scrollRoot&&(this.observer=new IntersectionObserver((t=>{t.forEach((t=>{t.intersectionRatio<.1&&this.close()}))}),{root:this.scrollRoot,rootMargin:"0px",threshold:[.1]}),this.observer.observe(t))}};t([e({type:String,attribute:"tooltip-style"})],a.prototype,"tooltipStyle",void 0),t([e({type:String,attribute:"scroll-container-selector"})],a.prototype,"scrollContainerSelector",void 0),t([e({type:String,attribute:"custom-global-close-event"})],a.prototype,"customGlobalCloseEvent",void 0),a=t([o("click-card")],a);
