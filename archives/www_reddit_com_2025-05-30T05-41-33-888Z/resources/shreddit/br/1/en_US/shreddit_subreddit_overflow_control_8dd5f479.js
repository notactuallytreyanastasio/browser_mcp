import{b as e,q as t,el as i,Q as s,_ as o,g as n,n as a,e as r,x as d,t as u,M as c,O as l,c as b,I as p,T as h,w as m,J as f,c4 as v,bf as S,U as g,em as y,r as w,b5 as C,u as B,en as I,eo as F,ep as E,aJ as D,H as M}from"./shell-2264602c.js";import{bl as $,aD as k,bm as U,bn as L,bo as x,bp as N,s as O,I as P,x as z,aq as q,A as j,aC as J}from"./icon-82dd10b4.js";import{l as T}from"./expandable-section-header-edd4c2b3.js";import{F as A}from"./index-3d99aec6.js";import"./select-controller-e11d5e4c.js";import"./community-picker-9f84d972.js";import{a1 as R,b5 as _}from"./age-gate-standalone-client-js-5357b0cf.js";import{P as G,b as H}from"./models-e42bd73f.js";import{S as Q}from"./feeds-4612b45d.js";import"./custom-feed-edit-button-a4f2cd83.js";const K=({subreddit:i,pageType:s})=>{const{id:o,name:n}=i;return e({source:G.ClubSubscription,action:t.Click,noun:H.Upgrade},{subreddit:{id:o,name:n},action_info:{page_type:s}})},V=e=>{switch(e){case i.Frequent:return"Frequent";case i.Low:return"Low";case i.Off:return"Off"}},W=(e,t)=>{switch(e){case i.Frequent:return t?.filled?x(t?.iconProps):N(t?.iconProps);case i.Low:return t?.filled?U(t?.iconProps):L(t?.iconProps);case i.Off:return t?.filled?$(t?.iconProps):k(t?.iconProps)}},X=e=>{switch(e){case i.Frequent:return"Notifications set to frequent";case i.Low:return"Notifications set to low";case i.Off:return"Notifications turned off"}},Y=s(O),Z=[i.Frequent,i.Low,i.Off];let ee=class extends Y{constructor(){super(...arguments),this.subredditId="",this.notificationLevel=i.Low,this.buttonSize=d.Small,this.iconSize=P.Small,this.isDropdownOpen=!1,this.isDisabled=!1}static get styles(){return[u]}async onItemSelect(e){if(this.notificationLevel!==e){this.isDisabled=!0;try{const t=(e=>{switch(e){case i.Frequent:return{isSubredditUpdatesInterestingPostEnabled:!0,isUpdateFromSubredditEnabled:!0};case i.Low:return{isSubredditUpdatesInterestingPostEnabled:!1,isUpdateFromSubredditEnabled:!0};case i.Off:default:return{isSubredditUpdatesInterestingPostEnabled:!1,isUpdateFromSubredditEnabled:!1}}})(e),s=await this.updateSubredditNotificationLevel(t);s?.data?.updateSubredditMuteAndNotificationLevelSettings?.ok?(this.notificationLevel=e,this.handleUpdateSuccess(e)):this.handleUpdateError(e)}catch(t){this.handleUpdateError(e)}this.isDisabled=!1}}async updateSubredditNotificationLevel(e){return c({operation:l.UpdateSubredditMuteAndNotificationLevelSettings,variables:{input:{subredditId:this.subredditId,...e}}})}handleUpdateSuccess(e){this.dispatchEvent(b("faceplate-alert",{level:p.info,message:X(e),namedContent:{icon:W(e,{iconProps:{size:P.Medium}})??z``,action:z``}}))}handleUpdateError(e){const t=()=>this.publish(h.TriggerFeedErrorBanner,{type:A.Close}),i=z`<div slot="leadingIcon">${q()}</div>`,s=z`<span slot="closeButton"> ${R("plainInverted",{"aria-label":"close button",onclick:t})} </span>`,o=z` <div slot="actionButtons"> ${_([{children:"Retry",attributes:{onclick:()=>{t(),this.onItemSelect(e)}}}],"plainInverted")} </div>`,n={msg:"Error updating notifications",className:"my-lg",appearance:"plainInverted",shape:"rounded",children:z` ${i} ${o} ${s} `};this.publish(h.TriggerFeedErrorBanner,{type:A.Show,data:n})}onDropdownOpen(){this.isDropdownOpen=!0}onDropdownClose(){this.isDropdownOpen=!1}render(){return z`<faceplate-dropdown-menu class="nd:hidden" position="bottom-end" .onopen="${this.onDropdownOpen}" .onclose="${this.onDropdownClose}"> ${m({appearance:"bordered",size:this.buttonSize,attributes:{disabled:this.isDisabled,role:"button","aria-label":"Notification frequency menu"},leadingIcon:W(this.notificationLevel||i.Low,{filled:!0,iconProps:{size:this.iconSize}}),selected:this.isDropdownOpen})} <faceplate-menu slot="menu" hidden> ${Z.map((e=>{const t=this.notificationLevel===e,i=e.toLowerCase();return z` <faceplate-tracker source="community" action="set_frequency" noun="${i}"> ${T({label:V(e),leadingIcon:W(e,{filled:t}),selected:t,attributes:{role:"menuitem","aria-label":`Notifications ${V(e)}`},onClick:()=>this.onItemSelect(e)})} </faceplate-tracker>`}))} </faceplate-menu> </faceplate-dropdown-menu>`}};o([a({type:String,attribute:"subreddit-id"})],ee.prototype,"subredditId",void 0),o([a({type:String,attribute:"notification-level"})],ee.prototype,"notificationLevel",void 0),o([a({type:String,attribute:"button-size"})],ee.prototype,"buttonSize",void 0),o([a({type:String,attribute:"icon-size"})],ee.prototype,"iconSize",void 0),o([n()],ee.prototype,"isDropdownOpen",void 0),o([n()],ee.prototype,"isDisabled",void 0),ee=o([r("shreddit-notification-frequency-control")],ee);const te=async e=>{const t=await c({operation:l.UpdateSubredditSubscriptions,variables:{input:{inputs:[e]}}});if(!t?.data?.updateSubredditSubscriptions?.ok)throw new Error("Failed to update subreddit subscription")},ie=s(O);let se=class extends ie{constructor(){super(...arguments),this.name="",this.prefixedName="",this.subredditId="",this.isMuted=!1,this.isFavorite=!1,this.subscribed=!1,this.showJoinButton=!1,this.isUserLoggedIn=!1,this.buttonSize=d.Small,this.iconSize=P.Small,this.isCustomFeedEnabled=!1,this.isPaidSubscriptionsEnabled=!1,this.isPaidSubscriber=!1,this.isDropdownOpen=!1,this.isDisabled=!1,this.onFavoriteButtonClick=this.disableButtonDuringExecution((async()=>{try{this.subscribed||(await te({subredditId:this.subredditId,subscribeState:v.Subscribed}),this.handleSubscriptionChange(v.Subscribed));const e=this.isFavorite?S.None:S.Favorited;await(async e=>{const t=await c({operation:l.UpdateSubredditFavoriteState,variables:{input:e}});if(!t?.data?.updateSubredditFavoriteState?.ok)throw new Error("Failed to update subreddit favorite state")})({subredditId:this.subredditId,favoriteState:e}),this.handleFavoriteStateChange(e)}catch(e){this.dispatchEvent(b("faceplate-alert",{level:p.error,message:"Something went wrong",cause:g(e)}))}})),this.onUnmuteButtonClick=this.disableButtonDuringExecution((async()=>{try{await(async e=>{const t=await c({operation:l.DeleteSubredditMuteSettings,variables:{input:e}});if(!t?.data?.deleteSubredditMuteSettings?.ok)throw new Error("Failed to unmute subreddit")})({subredditId:this.subredditId}),this.handleUnmuteChange()}catch(e){this.dispatchEvent(b("faceplate-alert",{level:p.error,message:"Something went wrong",cause:g(e)}))}})),this.onCommunityClubMembershipChange=e=>{this.subredditId===e.subredditId&&(this.isPaidSubscriber=e.isPaidSubscriber)},this.onJoinButtonClick=this.disableButtonDuringExecution((async e=>{try{e===v.Subscribed&&this.showCommunityGuide(this.name,!0).catch((()=>{})),await te({subredditId:this.subredditId,subscribeState:e}),this.handleSubscriptionChange(e)}catch(e){this.dispatchEvent(b("faceplate-alert",{level:p.error,message:"Something went wrong",cause:g(e)}))}})),this.showCommunityGuide=y,this.activateSubscriptionManagementDialog=()=>w({name:C,routeParams:{subredditId:this.subredditId},renderMode:B.Contents})}static get styles(){return[u]}firstUpdated(){this.subscribe(h.SubredditSubscriptionChange,(e=>{this.name===e.name&&(this.subscribed=e.subscribed)})),this.subscribe(h.SubredditMuteStatusChange,(e=>{this.subredditId===e.subredditId&&(this.isMuted=e.isMuted)})),this.addToCustomFeedButton?.addEventListener("custom-feed-edit-button:dialog-loaded",this.setupAddToCustomFeedButtonListeners),this.subscribe(h.SubredditCommunityClubMembershipChange,this.onCommunityClubMembershipChange)}disconnectedCallback(){super.disconnectedCallback(),this.unsubscribe(h.SubredditCommunityClubMembershipChange,this.onCommunityClubMembershipChange)}disableButton(){this.isDisabled=!0}enableButton(){this.isDisabled=!1}disableButtonDuringExecution(e){return async(...t)=>{this.disableButton(),await e(...t),this.enableButton()}}setupAddToCustomFeedButtonListeners(){const e=document.querySelector("rpl-dialog#custom-feed-add-modal");if(!e)return;const t=()=>{e.portalContainer.querySelector("custom-feed-edit-button")?.addEventListener("custom-feed-edit-button:dialog-loaded",(()=>{e.hide()}))};e.open?t():e.addEventListener("rpl-dialog:after-show",t)}handleFavoriteStateChange(e){this.isFavorite=e===S.Favorited,this.publish(h.SubredditFavoriteStatusChange,{id:this.subredditId,isFavorite:this.isFavorite});const t=this.isFavorite?`Added ${this.prefixedName} to favorites`:`Removed ${this.prefixedName} from favorites`;this.dispatchEvent(b("faceplate-alert",{level:p.info,message:t,namedContent:{action:z``}}))}handleUnmuteChange(){this.isMuted=!1,this.dispatchEvent(b("faceplate-alert",{level:p.info,message:`Unmuted ${this.prefixedName}`,namedContent:{action:z``}}))}handleSubscriptionChange(e){this.subscribed=e===v.Subscribed,this.publish(h.SubredditSubscriptionChange,{name:this.name,subscribed:this.subscribed})}async openMuteConfirmationModal(){await w({name:I});const e=document.getElementById(Q);e?.openModal({subredditId:this.subredditId,prefixedName:this.prefixedName,onMuteRequestStart:this.disableButton.bind(this),onMuteRequestEnd:this.enableButton.bind(this)})}onDropdownOpen(){this.isDropdownOpen=!0}onDropdownClose(){this.isDropdownOpen=!1}renderAddToCustomFeedButton(){return this.isCustomFeedEnabled?z` <custom-feed-edit-button class="nd:visible" feature="${F}" dialog-id="custom-feed-add-modal" query-params="${JSON.stringify({subredditId:this.subredditId})}"> ${T({label:"Add to custom feed",attributes:{tabindex:"0"}})} </custom-feed-edit-button> `:j}renderFavoriteButton(){const e=this.isFavorite?"Remove from favorites":"Add to favorites";return T({label:e,onClick:this.onFavoriteButtonClick})}renderMuteButton(){if(!this.prefixedName)return"";const e=this.isMuted?`Unmute ${this.prefixedName}`:`Mute ${this.prefixedName}`,t=this.isMuted?"unmute":"mute",i=this.isMuted?this.onUnmuteButtonClick:this.openMuteConfirmationModal;return z` <faceplate-tracker source="subreddit_muting" action="${t}" noun="subreddit"> ${T({label:e,onClick:i})} </faceplate-tracker>`}renderJoinButton(){const e=this.subscribed?"Leave":"Join",t=this.subscribed?"unsubscribe":"subscribe",i=this.subscribed?v.None:v.Subscribed;return z`<faceplate-tracker source="community" action="click" noun="${t}"> ${T({label:e,onClick:()=>this.onJoinButtonClick(i)})} </faceplate-tracker>`}handleCommunityUpgradeButtonClick(){return this.dispatchEvent(b("community-subscription-overflow-button-clicked")),w({name:E,routeParams:{subredditId:this.subredditId},renderMode:B.Contents})}renderUpgradeButton(){return this.isPaidSubscriber?z`${T({label:"Manage your subscription",onClick:this.activateSubscriptionManagementDialog})}`:this.isPaidSubscriptionsEnabled?z`${T({label:`Upgrade ${this.prefixedName}`,onClick:()=>{this.handleCommunityUpgradeButtonClick(),D(this,K({subreddit:{id:this.subredditId,name:this.name},pageType:M.CommunityOverflow}))}})}`:j}render(){return z`<faceplate-dropdown-menu class="nd:hidden" position="bottom-end" .onopen="${this.onDropdownOpen}" .onclose="${this.onDropdownClose}"> ${m({appearance:"bordered",attributes:{"aria-label":"Open overflow menu",disabled:this.isDisabled},size:this.buttonSize,leadingIcon:J({size:this.iconSize}),selected:this.isDropdownOpen})} <faceplate-menu slot="menu" class="max-h-[18rem] overflow-auto" hidden> ${this.isUserLoggedIn?z` ${[this.renderAddToCustomFeedButton(),this.renderFavoriteButton(),this.renderUpgradeButton(),this.renderMuteButton()]} ${this.showJoinButton?this.renderJoinButton():""} `:""} <slot name="devvit-context-actions"></slot> </faceplate-menu> </faceplate-dropdown-menu>`}};o([a({type:String})],se.prototype,"name",void 0),o([a({type:String,attribute:"prefixed-name"})],se.prototype,"prefixedName",void 0),o([a({type:String,attribute:"subreddit-id"})],se.prototype,"subredditId",void 0),o([a({type:Boolean,attribute:"is-muted"})],se.prototype,"isMuted",void 0),o([a({type:Boolean,attribute:"is-favorite"})],se.prototype,"isFavorite",void 0),o([a({type:Boolean,attribute:"subscribed"})],se.prototype,"subscribed",void 0),o([a({type:Boolean,attribute:"show-join-button"})],se.prototype,"showJoinButton",void 0),o([a({type:Boolean,attribute:"is-user-logged-in"})],se.prototype,"isUserLoggedIn",void 0),o([a({type:String,attribute:"button-size"})],se.prototype,"buttonSize",void 0),o([a({type:String,attribute:"icon-size"})],se.prototype,"iconSize",void 0),o([a({type:Boolean,attribute:"allow-custom-feed"})],se.prototype,"isCustomFeedEnabled",void 0),o([a({type:Boolean,attribute:"paid-subscriptions-enabled"})],se.prototype,"isPaidSubscriptionsEnabled",void 0),o([a({type:Boolean,attribute:"paid-subscriber"})],se.prototype,"isPaidSubscriber",void 0),o([n()],se.prototype,"isDropdownOpen",void 0),o([n()],se.prototype,"isDisabled",void 0),o([f(`custom-feed-edit-button[feature="${F}"]`)],se.prototype,"addToCustomFeedButton",void 0),se=o([r("shreddit-subreddit-overflow-control")],se);export{K as c};
