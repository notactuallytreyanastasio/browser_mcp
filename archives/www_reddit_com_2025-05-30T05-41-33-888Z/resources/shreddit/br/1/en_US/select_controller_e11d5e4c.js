import{_ as e,n as t,J as s,e as i}from"./shell-2264602c.js";import{s as n,a as o,x as h}from"./icon-82dd10b4.js";import{P as l}from"./user-flair-afad799f.js";import{F as r}from"./age-gate-standalone-client-js-5357b0cf.js";let d=class extends n{constructor(){super(...arguments),this.position="bottom-middle",this.triggerEvent="click",this.disabled=!1,this.manualTriggerFocus=!1,this.containerElement=document.documentElement,this.scrollContainerElement=window,this.onopen=null,this.onclose=null,this.emitter=r(this),this._popperController=new l(this,{position:this.position,referenceElementKey:"referenceElement",popperElementKey:"_menu",containerElement:this.containerElement,scrollContainerElement:this.scrollContainerElement,manualTriggerFocus:this.manualTriggerFocus}),this._eventUsedMap=new WeakMap,this.updated=e=>{e.has("position")&&this._popperController.updateOptions({position:this.position}),e.has("manualTriggerFocus")&&this._popperController.updateOptions({manualTriggerFocus:this.manualTriggerFocus})},this.handleDocumentClick=e=>{if(!(e.target instanceof Element)||this.hidden)return;const t=e.target.closest('[slot="menu"]'),s=this._eventUsedMap.has(e);null!==t||s||this.close()},this.handleEscape=e=>{"Escape"===e.key&&this.close(e)},this.addListenersWhileOpened=()=>{document.addEventListener("click",this.handleDocumentClick),document.addEventListener("keydown",this.handleEscape)},this.cleanupListenersWhileOpened=()=>{document.removeEventListener("click",this.handleDocumentClick),document.removeEventListener("keydown",this.handleEscape)},this.show=e=>{this.hidden=!1,this.emitter.dispatch("open"),this._menu.style.pointerEvents="auto",this._popperController.currentState.animationFinished.then((()=>{this.addListenersWhileOpened(),this.emitter.dispatch("opened")})),this.onopen?.(e??new Event("faceplate-dropdown-menu-show"))},this.close=e=>{this.cleanupListenersWhileOpened(),this.hidden=!0,this.emitter.dispatch("close"),this._menu.style.pointerEvents="none",this._popperController.currentState.animationFinished.then((()=>{this.emitter.dispatch("closed")})),this.onclose?.(e??new Event("faceplate-dropdown-menu-open"))},this.toggle=e=>{this.hidden?this.show(e):this.close(e)},this.handleClick=this.disabledHandler((e=>{this._eventUsedMap.set(e,!0),"click"===this.triggerEvent&&(this.hidden?this.show(e):this.close(e))})),this.handleMouseenter=this.disabledHandler((e=>{"hover"===this.triggerEvent&&this.show(e)})),this.handleMouseleave=this.disabledHandler((e=>{"hover"===this.triggerEvent&&this.close(e)}))}get referenceElement(){return this.shadowRoot?.querySelector("#trigger")?.assignedElements()[0]??this}static get styles(){return[o`:host{--faceplate-dropdown-menu-z-index:1000;display:flex}#menu{border-radius:var(--rem8);box-shadow:0 4px 8px 0 rgba(0,0,0,.1),0 6px 12px 0 rgba(0,0,0,.25);display:inline-flex;justify-content:center;overflow:hidden;width:max-content;z-index:var(--faceplate-dropdown-menu-z-index);outline-offset:-1px}`,l.defaultPopperContentStyles]}get hidden(){return"closed"===this._popperController.currentState.state}set hidden(e){!0===e?this._popperController.close():this._popperController.open()}connectedCallback(){super.connectedCallback(),this.classList.add("connected")}firstUpdated(){this._menu&&(this._menu.style.pointerEvents="none")}disconnectedCallback(){super.disconnectedCallback(),this.cleanupListenersWhileOpened()}disabledHandler(e){return t=>{this.disabled||e(t)}}render(){return h` <slot id="trigger" aria-describedby="menu" faceplate-popper-trigger aria-controls="menu" @click="${this.handleClick}" @mouseenter="${this.handleMouseenter}" @mouseleave="${this.handleMouseleave}" @focusin="${this.handleMouseenter}" @focusout="${this.handleMouseleave}"></slot> <article id="menu" faceplate-popper-content> <slot name="menu"></slot> </article> `}};e([t({type:String})],d.prototype,"position",void 0),e([t({type:String,attribute:"trigger-event"})],d.prototype,"triggerEvent",void 0),e([t({type:Boolean})],d.prototype,"disabled",void 0),e([t({type:Boolean,attribute:"manual-trigger-focus"})],d.prototype,"manualTriggerFocus",void 0),e([s("#menu")],d.prototype,"_menu",void 0),e([s("#trigger")],d.prototype,"_trigger",void 0),d=e([i("faceplate-dropdown-menu")],d);class a{constructor(e){this.previousChar="",this.focusedIndex=-1,this.cancelUpdate=!1,this.hasOptionVisualFocus=!1,this.hasSelection=!1,this.searchString="",this.searchTimeoutId=null,this.initializeSelections=()=>{this.options.forEach((e=>{this.makeSelection({selected:e.selected,option:e})}))},this.dispatchChangeEvent=()=>{this.hasSelection=!0,this.host.dispatchEvent(new CustomEvent(`${this.host.nodeName.toLowerCase()}:change`,{composed:!0,bubbles:!0,detail:{target:this.host}}))},this.onBlur=e=>{this.options.includes(e.relatedTarget)||(this.closeDropdownMenu(),this.host.blur())},this.onClick=()=>{(this.host.multiple&&!this.hasOptionVisualFocus||!this.host.multiple)&&this.host.dropdownMenu?.toggle()},this.shouldSelectFocusedOption=()=>{const e=this.host.hasAttribute("autocomplete"),t=!!this.host.readonly;return(e||t)&&!this.hasSelection&&this.hasOptionVisualFocus},this.onMenuClose=()=>{if(this.cancelUpdate||this.shouldSelectFocusedOption()&&this.selectFocusedOption(),this.selectedIndex>=0)this.focusedIndex=this.selectedIndex;else{if(this.host.readonly&&this.cancelUpdate)return;this.visibleOptions[this.focusedIndex]?.visualFocus(!1)}this.hasOptionVisualFocus=!1},this.onMenuOpen=()=>{this.focusedIndex=this.selectedIndex>=0?this.selectedIndex:-1,this.host.readonly&&this.focusedIndex<0&&(this.focusedIndex=0),this.focusedIndex>=0&&this.visuallyFocusOption(this.focusedIndex),this.hasSelection=!1,this.cancelUpdate=!1},this.onFaceplateOptionSelect=e=>{if(e.stopImmediatePropagation(),e.defaultPrevented)return;const t=e,{option:s,selected:i,allowSingleDeselection:n}=t?.detail||{};s&&this.makeSelection({option:s,selected:i,allowSingleDeselection:n})},this.makeSelection=async({selected:e,option:t,allowSingleDeselection:s})=>{this.host.multiple?(t?.dispatchEvent(this.createUpdateEvent(e)),await(t?.updateComplete)):(!s&&e||s)&&(e&&this.singleSelectionCache!==t&&this.singleSelectionCache?.dispatchEvent(this.createUpdateEvent(!1)),t?.selected!==e&&(t?.dispatchEvent(this.createUpdateEvent(e)),await(t?.updateComplete)),e&&(this.singleSelectionCache=t),setTimeout(this.closeDropdownMenu)),this.dispatchChangeEvent(),this.cancelUpdate=!1,this.host.requestUpdate()},this.visuallyFocusNextOption=()=>{this.focusedIndex===this.visibleOptions.length-1&&(this.focusedIndex=-1),this.visuallyFocusOption(++this.focusedIndex),this.hasOptionVisualFocus=!0},this.visuallyFocusPrevOption=()=>{this.focusedIndex<=0&&(this.focusedIndex=this.visibleOptions.length),this.visuallyFocusOption(--this.focusedIndex),this.hasOptionVisualFocus=!0},this.focusNextMatchedOption=e=>{if("number"==typeof this.searchTimeoutId&&window.clearTimeout(this.searchTimeoutId),this.searchTimeoutId=setTimeout((()=>{this.previousChar=this.searchString,this.searchString=""}),500),this.searchString+=e,this.searchString===this.previousChar){let e=this.focusedIndex+1;for(let t=0;t<this.visibleOptions.length;t++){if(e>this.visibleOptions.length-1&&(e=0),this.visibleOptions[e]?.displayText?.toLowerCase().startsWith(this.searchString)){this.visuallyFocusOption(e),this.focusedIndex=e;break}e++}}else{const e=this.visibleOptions.findIndex(((e,t)=>t!==this.focusedIndex&&e.displayText?.toLowerCase().startsWith(this.searchString)));-1!==e&&(this.focusedIndex=e,this.visuallyFocusOption(this.focusedIndex))}this.previousChar=this.searchString},this.selectFocusedOption=()=>{if(this.focusedIndex<0)return;const e=this.visibleOptions[this.focusedIndex];this.makeSelection({selected:!e.selected,option:e})},this.visuallyFocusOption=e=>{this.currentFocusedOption&&this.currentFocusedOption?.visualFocus(!1),this.currentFocusedOption=this.visibleOptions[e],this.currentFocusedOption?.visualFocus(!0),this.currentFocusedOption?.scrollIntoView()},this.openDropdownMenu=()=>{!this.host.disabled&&this.host.dropdownMenu?.hidden&&this.host.dropdownMenu?.show()},this.closeDropdownMenu=()=>{this.host.dropdownMenu?.hidden||this.host.dropdownMenu?.close()},this.handleKeyBindings=e=>{switch(e.key){case"ArrowDown":if(this.host.dropdownMenu?.hidden)return void this.openDropdownMenu();e.altKey||this.visuallyFocusNextOption();break;case"ArrowUp":this.openDropdownMenu(),this.visuallyFocusPrevOption();break;case"Escape":this.cancelUpdate=!0,this.closeDropdownMenu(),e.stopPropagation();break;case"Enter":case"Tab":this.host.dropdownMenu?.hidden||this.selectFocusedOption();break;default:e.key.match("^\\w$")&&(this.openDropdownMenu(),(this.host.multiple||this.host.readonly||this.host.referenceElement instanceof HTMLButtonElement)&&this.focusNextMatchedOption(e.key))}},(this.host=e).addController(this)}async hostConnected(){await this.host.updateComplete,this.resizeObserver=new ResizeObserver((()=>{this.host.style.setProperty("--select-width",`${this.host.getBoundingClientRect().width}px`)})),this.resizeObserver?.observe(this.host),this.host.addEventListener("faceplate-option:select",this.onFaceplateOptionSelect),this.host.addEventListener("keydown",this.handleKeyBindings),this.host.addEventListener("faceplate-dropdown-menu:open",this.onMenuOpen),this.host.addEventListener("faceplate-dropdown-menu:closed",this.onMenuClose),this.host.addEventListener("click",this.onClick),this.host.addEventListener("blur",this.onBlur),this.initializeSelections(),this.host.dropdownMenu&&(this.host.dropdownMenu.triggerEvent=void 0)}hostDisconnected(){this.resizeObserver?.disconnect(),this.host.removeEventListener("keydown",this.handleKeyBindings),this.host.removeEventListener("faceplate-option:select",this.onFaceplateOptionSelect),this.host.removeEventListener("faceplate-dropdown-menu:open",this.onMenuOpen),this.host.removeEventListener("faceplate-dropdown-menu:closed",this.onMenuClose),this.host.removeEventListener("click",this.onClick),this.host.removeEventListener("blur",this.onBlur)}get selectedOptions(){return this.options.filter((e=>e.selected))}get options(){return this.host.options??[]}get selectedIndex(){return this.options.findIndex((e=>e.selected))}get visibleOptions(){return(this.host.options??[]).filter((e=>!e.hasAttribute("hidden")))}get value(){return this.selectedOptions[0]?.value||""}set value(e){if(e===this.value)return;const t=this.options.findIndex((t=>t.value===e));if(-1===t)this.singleSelectionCache?.dispatchEvent(this.createUpdateEvent(!1)),this.singleSelectionCache=null;else{const e=this.options[t];this.makeSelection({selected:t>=0,option:e})}}createUpdateEvent(e){return new CustomEvent("faceplate-option:update",{composed:!0,detail:{selected:e}})}getSelectedOptionsAsStr(){return this.selectedOptions.map((e=>e.displayText)).join(", ").trim()}}export{d as F,a as S};
